/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef createDb_TYPES_H
#define createDb_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Data;

typedef struct _Data__isset {
  _Data__isset() : x(false), y(false), th(false), stamp(false) {}
  bool x :1;
  bool y :1;
  bool th :1;
  bool stamp :1;
} _Data__isset;

class Data {
 public:

  Data(const Data&);
  Data& operator=(const Data&);
  Data() : x(0), y(0), th(0), stamp(0) {
  }

  virtual ~Data() throw();
  double x;
  double y;
  double th;
  int32_t stamp;

  _Data__isset __isset;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_th(const double val);

  void __set_stamp(const int32_t val);

  bool operator == (const Data & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(th == rhs.th))
      return false;
    if (!(stamp == rhs.stamp))
      return false;
    return true;
  }
  bool operator != (const Data &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Data & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Data &a, Data &b);

inline std::ostream& operator<<(std::ostream& out, const Data& obj)
{
  obj.printTo(out);
  return out;
}



#endif
