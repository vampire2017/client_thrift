/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CreateDbService_H
#define CreateDbService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "createDb_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class CreateDbServiceIf {
 public:
  virtual ~CreateDbServiceIf() {}
  virtual void createDb(const std::string& img_, const Data& data) = 0;
};

class CreateDbServiceIfFactory {
 public:
  typedef CreateDbServiceIf Handler;

  virtual ~CreateDbServiceIfFactory() {}

  virtual CreateDbServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(CreateDbServiceIf* /* handler */) = 0;
};

class CreateDbServiceIfSingletonFactory : virtual public CreateDbServiceIfFactory {
 public:
  CreateDbServiceIfSingletonFactory(const boost::shared_ptr<CreateDbServiceIf>& iface) : iface_(iface) {}
  virtual ~CreateDbServiceIfSingletonFactory() {}

  virtual CreateDbServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(CreateDbServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<CreateDbServiceIf> iface_;
};

class CreateDbServiceNull : virtual public CreateDbServiceIf {
 public:
  virtual ~CreateDbServiceNull() {}
  void createDb(const std::string& /* img_ */, const Data& /* data */) {
    return;
  }
};

typedef struct _CreateDbService_createDb_args__isset {
  _CreateDbService_createDb_args__isset() : img_(false), data(false) {}
  bool img_ :1;
  bool data :1;
} _CreateDbService_createDb_args__isset;

class CreateDbService_createDb_args {
 public:

  CreateDbService_createDb_args(const CreateDbService_createDb_args&);
  CreateDbService_createDb_args& operator=(const CreateDbService_createDb_args&);
  CreateDbService_createDb_args() : img_() {
  }

  virtual ~CreateDbService_createDb_args() throw();
  std::string img_;
  Data data;

  _CreateDbService_createDb_args__isset __isset;

  void __set_img_(const std::string& val);

  void __set_data(const Data& val);

  bool operator == (const CreateDbService_createDb_args & rhs) const
  {
    if (!(img_ == rhs.img_))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const CreateDbService_createDb_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateDbService_createDb_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CreateDbService_createDb_pargs {
 public:


  virtual ~CreateDbService_createDb_pargs() throw();
  const std::string* img_;
  const Data* data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CreateDbService_createDb_result {
 public:

  CreateDbService_createDb_result(const CreateDbService_createDb_result&);
  CreateDbService_createDb_result& operator=(const CreateDbService_createDb_result&);
  CreateDbService_createDb_result() {
  }

  virtual ~CreateDbService_createDb_result() throw();

  bool operator == (const CreateDbService_createDb_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const CreateDbService_createDb_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CreateDbService_createDb_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class CreateDbService_createDb_presult {
 public:


  virtual ~CreateDbService_createDb_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class CreateDbServiceClient : virtual public CreateDbServiceIf {
 public:
    CreateDbServiceClient(){}
  CreateDbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CreateDbServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createDb(const std::string& img_, const Data& data);
  void send_createDb(const std::string& img_, const Data& data);
  void recv_createDb();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class CreateDbServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<CreateDbServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (CreateDbServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_createDb(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  CreateDbServiceProcessor(boost::shared_ptr<CreateDbServiceIf> iface) :
    iface_(iface) {
    processMap_["createDb"] = &CreateDbServiceProcessor::process_createDb;
  }

  virtual ~CreateDbServiceProcessor() {}
};

class CreateDbServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  CreateDbServiceProcessorFactory(const ::boost::shared_ptr< CreateDbServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< CreateDbServiceIfFactory > handlerFactory_;
};

class CreateDbServiceMultiface : virtual public CreateDbServiceIf {
 public:
  CreateDbServiceMultiface(std::vector<boost::shared_ptr<CreateDbServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~CreateDbServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<CreateDbServiceIf> > ifaces_;
  CreateDbServiceMultiface() {}
  void add(boost::shared_ptr<CreateDbServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void createDb(const std::string& img_, const Data& data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createDb(img_, data);
    }
    ifaces_[i]->createDb(img_, data);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class CreateDbServiceConcurrentClient : virtual public CreateDbServiceIf {
 public:
  CreateDbServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  CreateDbServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void createDb(const std::string& img_, const Data& data);
  int32_t send_createDb(const std::string& img_, const Data& data);
  void recv_createDb(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
