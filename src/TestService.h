/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef TestService_H
#define TestService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "test_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class TestServiceIf {
 public:
  virtual ~TestServiceIf() {}
  virtual void test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th) = 0;
};

class TestServiceIfFactory {
 public:
  typedef TestServiceIf Handler;

  virtual ~TestServiceIfFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(TestServiceIf* /* handler */) = 0;
};

class TestServiceIfSingletonFactory : virtual public TestServiceIfFactory {
 public:
  TestServiceIfSingletonFactory(const boost::shared_ptr<TestServiceIf>& iface) : iface_(iface) {}
  virtual ~TestServiceIfSingletonFactory() {}

  virtual TestServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(TestServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<TestServiceIf> iface_;
};

class TestServiceNull : virtual public TestServiceIf {
 public:
  virtual ~TestServiceNull() {}
  void test(const std::string& /* img_ */, const double /* odom_x */, const double /* odom_y */, const double /* odom_th */) {
    return;
  }
};

typedef struct _TestService_test_args__isset {
  _TestService_test_args__isset() : img_(false), odom_x(false), odom_y(false), odom_th(false) {}
  bool img_ :1;
  bool odom_x :1;
  bool odom_y :1;
  bool odom_th :1;
} _TestService_test_args__isset;

class TestService_test_args {
 public:

  TestService_test_args(const TestService_test_args&);
  TestService_test_args& operator=(const TestService_test_args&);
  TestService_test_args() : img_(), odom_x(0), odom_y(0), odom_th(0) {
  }

  virtual ~TestService_test_args() throw();
  std::string img_;
  double odom_x;
  double odom_y;
  double odom_th;

  _TestService_test_args__isset __isset;

  void __set_img_(const std::string& val);

  void __set_odom_x(const double val);

  void __set_odom_y(const double val);

  void __set_odom_th(const double val);

  bool operator == (const TestService_test_args & rhs) const
  {
    if (!(img_ == rhs.img_))
      return false;
    if (!(odom_x == rhs.odom_x))
      return false;
    if (!(odom_y == rhs.odom_y))
      return false;
    if (!(odom_th == rhs.odom_th))
      return false;
    return true;
  }
  bool operator != (const TestService_test_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_test_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_test_pargs {
 public:


  virtual ~TestService_test_pargs() throw();
  const std::string* img_;
  const double* odom_x;
  const double* odom_y;
  const double* odom_th;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_test_result {
 public:

  TestService_test_result(const TestService_test_result&);
  TestService_test_result& operator=(const TestService_test_result&);
  TestService_test_result() {
  }

  virtual ~TestService_test_result() throw();

  bool operator == (const TestService_test_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const TestService_test_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const TestService_test_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class TestService_test_presult {
 public:


  virtual ~TestService_test_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class TestServiceClient : virtual public TestServiceIf {
 public:
    TestServiceClient(){};
  TestServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th);
  void send_test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th);
  void recv_test();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class TestServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<TestServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (TestServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_test(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  TestServiceProcessor(boost::shared_ptr<TestServiceIf> iface) :
    iface_(iface) {
    processMap_["test"] = &TestServiceProcessor::process_test;
  }

  virtual ~TestServiceProcessor() {}
};

class TestServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  TestServiceProcessorFactory(const ::boost::shared_ptr< TestServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< TestServiceIfFactory > handlerFactory_;
};

class TestServiceMultiface : virtual public TestServiceIf {
 public:
  TestServiceMultiface(std::vector<boost::shared_ptr<TestServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~TestServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<TestServiceIf> > ifaces_;
  TestServiceMultiface() {}
  void add(boost::shared_ptr<TestServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->test(img_, odom_x, odom_y, odom_th);
    }
    ifaces_[i]->test(img_, odom_x, odom_y, odom_th);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class TestServiceConcurrentClient : virtual public TestServiceIf {
 public:
  TestServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  TestServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th);
  int32_t send_test(const std::string& img_, const double odom_x, const double odom_y, const double odom_th);
  void recv_test(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
