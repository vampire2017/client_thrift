/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UpdateService_H
#define UpdateService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "updateDatabase_types.h"



#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class UpdateServiceIf {
 public:
  virtual ~UpdateServiceIf() {}
  virtual void update(const std::string& img_, const Pose& pose_data) = 0;
};

class UpdateServiceIfFactory {
 public:
  typedef UpdateServiceIf Handler;

  virtual ~UpdateServiceIfFactory() {}

  virtual UpdateServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UpdateServiceIf* /* handler */) = 0;
};

class UpdateServiceIfSingletonFactory : virtual public UpdateServiceIfFactory {
 public:
  UpdateServiceIfSingletonFactory(const boost::shared_ptr<UpdateServiceIf>& iface) : iface_(iface) {}
  virtual ~UpdateServiceIfSingletonFactory() {}

  virtual UpdateServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UpdateServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UpdateServiceIf> iface_;
};

class UpdateServiceNull : virtual public UpdateServiceIf {
 public:
  virtual ~UpdateServiceNull() {}
  void update(const std::string& /* img_ */, const Pose& /* pose_data */) {
    return;
  }
};

typedef struct _UpdateService_update_args__isset {
  _UpdateService_update_args__isset() : img_(false), pose_data(false) {}
  bool img_ :1;
  bool pose_data :1;
} _UpdateService_update_args__isset;

class UpdateService_update_args {
 public:

  UpdateService_update_args(const UpdateService_update_args&);
  UpdateService_update_args& operator=(const UpdateService_update_args&);
  UpdateService_update_args() : img_() {
  }

  virtual ~UpdateService_update_args() throw();
  std::string img_;
  Pose pose_data;

  _UpdateService_update_args__isset __isset;

  void __set_img_(const std::string& val);

  void __set_pose_data(const Pose& val);

  bool operator == (const UpdateService_update_args & rhs) const
  {
    if (!(img_ == rhs.img_))
      return false;
    if (!(pose_data == rhs.pose_data))
      return false;
    return true;
  }
  bool operator != (const UpdateService_update_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateService_update_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UpdateService_update_pargs {
 public:


  virtual ~UpdateService_update_pargs() throw();
  const std::string* img_;
  const Pose* pose_data;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UpdateService_update_result {
 public:

  UpdateService_update_result(const UpdateService_update_result&);
  UpdateService_update_result& operator=(const UpdateService_update_result&);
  UpdateService_update_result() {
  }

  virtual ~UpdateService_update_result() throw();

  bool operator == (const UpdateService_update_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const UpdateService_update_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpdateService_update_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UpdateService_update_presult {
 public:


  virtual ~UpdateService_update_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UpdateServiceClient : virtual public UpdateServiceIf {
 public:
    UpdateServiceClient(){}
  UpdateServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UpdateServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void update(const std::string& img_, const Pose& pose_data);
  void send_update(const std::string& img_, const Pose& pose_data);
  void recv_update();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UpdateServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UpdateServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UpdateServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_update(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UpdateServiceProcessor(boost::shared_ptr<UpdateServiceIf> iface) :
    iface_(iface) {
    processMap_["update"] = &UpdateServiceProcessor::process_update;
  }

  virtual ~UpdateServiceProcessor() {}
};

class UpdateServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UpdateServiceProcessorFactory(const ::boost::shared_ptr< UpdateServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UpdateServiceIfFactory > handlerFactory_;
};

class UpdateServiceMultiface : virtual public UpdateServiceIf {
 public:
  UpdateServiceMultiface(std::vector<boost::shared_ptr<UpdateServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UpdateServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UpdateServiceIf> > ifaces_;
  UpdateServiceMultiface() {}
  void add(boost::shared_ptr<UpdateServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void update(const std::string& img_, const Pose& pose_data) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update(img_, pose_data);
    }
    ifaces_[i]->update(img_, pose_data);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class UpdateServiceConcurrentClient : virtual public UpdateServiceIf {
 public:
  UpdateServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  UpdateServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void update(const std::string& img_, const Pose& pose_data);
  int32_t send_update(const std::string& img_, const Pose& pose_data);
  void recv_update(const int32_t seqid);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif



#endif
