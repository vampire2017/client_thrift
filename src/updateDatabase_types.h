/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef updateDatabase_TYPES_H
#define updateDatabase_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class Pose;

typedef struct _Pose__isset {
  _Pose__isset() : x(false), y(false), th(false) {}
  bool x :1;
  bool y :1;
  bool th :1;
} _Pose__isset;

class Pose : public virtual ::apache::thrift::TBase {
 public:

  Pose(const Pose&);
  Pose& operator=(const Pose&);
  Pose() : x(0), y(0), th(0) {
  }

  virtual ~Pose() throw();
  double x;
  double y;
  double th;

  _Pose__isset __isset;

  void __set_x(const double val);

  void __set_y(const double val);

  void __set_th(const double val);

  bool operator == (const Pose & rhs) const
  {
    if (!(x == rhs.x))
      return false;
    if (!(y == rhs.y))
      return false;
    if (!(th == rhs.th))
      return false;
    return true;
  }
  bool operator != (const Pose &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Pose & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Pose &a, Pose &b);

inline std::ostream& operator<<(std::ostream& out, const Pose& obj)
{
  obj.printTo(out);
  return out;
}



#endif
